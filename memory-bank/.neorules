# .neorules - NEO's Learning Journal

## Project Patterns

- **File Naming**: Use snake_case for Python files and directories
- **Documentation**: All files should start with docstrings explaining their purpose
- **Environment Variables**: Use environment variables for configuration with sensible defaults
- **Error Handling**: Always wrap API calls in try-except blocks with informative error messages
- **Testing**: Test both the MCP servers and agents independently
- **Plugin System**: Use a plugin registration pattern for extending agent capabilities
- **Specialized Servers**: Create purpose-specific MCP servers rather than one monolithic server
- **Token Budget**: Use token counting to optimize output for LLM consumption
- **Import Path Requirement**: All scripts that import from `src` must be run with the current directory (`.`) in `PYTHONPATH` (e.g., `PYTHONPATH=.:src:agents ...`). This is required for `from src...` imports to work when running scripts directly.
- **Running Package Modules**: For scripts within package directories (like `agents/`) that import from other top-level packages (like `src/`), the idiomatic way to run them from the project root is using `python -m package_name.module_name` (e.g., `python -m agents.mcp_test_server`). This ensures Python correctly recognizes the project root and handles imports.

## User Preferences

- **Simplicity**: User prefers simple and straightforward implementations
- **Self-Contained**: Prefer self-contained solutions where possible
- **Documentation**: Detailed documentation is important for this project
- **Memory Bank**: Always update memory bank files after significant changes
- **Test Isolation**: Support both local and Docker-based test execution for isolation
- **Clean Output**: Format and clean test and analysis output for better readability

## Critical Implementation Paths

- **Agent → Ollama Communication**: `agents/agent.py` - `OllamaAgent.generate()` method
- **Agent → MCP Communication**: `agents/agent.py` - `OllamaAgent.get_context()` method
- **MCP Server Endpoints**: `src/mcp_server.py` - FastAPI routes for context management
- **Code Analysis Server**: `agents/mcp_code_server.py` - FastAPI routes for code analysis
- **Test Runner Server**: `agents/mcp_test_server.py` - FastAPI routes for test execution
- **Plugin Integration**: `examples/test_analysis_plugin.py` and `examples/code_analysis_plugin.py`
- **Setup Process**: `scripts/setup.sh` - System setup and dependency management

## Known Challenges

- **Large Model Requirements**: DeepSeek-R1:32B requires significant computational resources
- **Context Size Limitations**: Need to handle large contexts efficiently
- **Dependency Management**: Keep UV dependencies up to date
- **Integration Testing**: Testing the full system with all components requires careful setup
- **Port Management**: Multiple MCP servers require different ports and management
- **Docker Integration**: Docker test execution requires proper Docker installation and setup
- **Test Output Processing**: Balancing detail with conciseness in test output reporting

## Evolution of Project Decisions

- **Initial Decision**: Started with in-memory storage for MCP servers for simplicity
  - **Future Evolution**: Plan to add persistent storage options (SQLite, PostgreSQL)

- **Initial Decision**: Basic authentication not implemented in MCP servers
  - **Future Evolution**: Will add basic auth and potentially JWT support

- **Initial Decision**: Simple agent implementation to prove the concept
  - **Future Evolution**: Enhance with tool usage and more sophisticated context handling

- **Initial Decision**: Created separate MCP servers for different purposes
  - **Future Evolution**: May consider a unified server with modules or a shared client library

- **Initial Decision**: Token budget implementation with OpenAI's tiktoken
  - **Future Evolution**: Support for other tokenizers and more sophisticated budget management

## Tool Usage Patterns

- **Setup Script**: Use `scripts/setup.sh` for initial system setup
- **Main MCP Server**: Run with `python src/mcp_server.py` (add `--debug` for development)
- **Code Analysis Server**: Run with `python agents/mcp_code_server.py`
- **Test Runner Server**: Run with `python agents/mcp_test_server.py`
- **Agent**: Run with `python agents/agent.py` (add `--model` to specify different models)
- **Code Analysis**: Use `examples/code_analysis_plugin.py` for code analysis and formatting
- **Test Runner**: Use `examples/test_analysis_plugin.py` for running and analyzing tests
- **Memory Bank**: Keep memory-bank files updated with latest project status 